package com.mayatout.mccourse.block;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.HorizontalBlock;
import net.minecraft.item.BlockItemUseContext;
import net.minecraft.state.DirectionProperty;
import net.minecraft.state.StateContainer;
import net.minecraft.util.Mirror;
import net.minecraft.util.Rotation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.IBooleanFunction;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;

import javax.annotation.Nullable;
import java.util.stream.Stream;


public class Table extends Block {
    private static final DirectionProperty FACING = HorizontalBlock.HORIZONTAL_FACING;

    private static final VoxelShape SHAPE_W = Stream.of(
            Block.makeCuboidShape(-0.2559280916476281, 0, 14.892124358887472, 0.7440719083523755, 9, 15.892124358887472),
            Block.makeCuboidShape(14.744071908352375, 0, 14.892124358887472, 15.744071908352375, 9, 15.892124358887472),
            Block.makeCuboidShape(-0.2559280916476281, 0, -0.10787564111252657, 0.7440719083523755, 9, 0.8921243588874734),
            Block.makeCuboidShape(14.744071908352375, 0, -0.10787564111252657, 15.744071908352375, 9, 0.8921243588874734),
            Block.makeCuboidShape(-0.2559280916476281, 9, -0.10787564111252657, 15.744071908352375, 10, 15.892124358887472),
            Block.makeCuboidShape(6.744071908352375, 10, 11.892124358887472, 8.744071908352375, 11, 13.892124358887472),
            Block.makeCuboidShape(6.744071908352375, 10, 8.892124358887472, 8.744071908352375, 11, 10.892124358887472),
            Block.makeCuboidShape(6.744071908352375, 11, 9.892124358887472, 8.744071908352375, 13, 12.892124358887472),
            Block.makeCuboidShape(6.744071908352375, 0, 14.892124358887472, 7.744071908352375, 16, 15.892124358887472),
            Block.makeCuboidShape(6.744071908352375, 13, 8.892124358887472, 8.744071908352375, 15, 13.892124358887472),
            Block.makeCuboidShape(7.744071908352375, 12, 6.892124358887472, 8.744071908352375, 13, 9.892124358887472),
            Block.makeCuboidShape(7.744071908352375, 12, 12.892124358887472, 8.744071908352375, 13, 15.892124358887472),
            Block.makeCuboidShape(7.744071908352375, 11, 14.892124358887472, 8.744071908352375, 12, 15.892124358887472),
            Block.makeCuboidShape(7.744071908352375, 11, 6.892124358887472, 8.744071908352375, 12, 7.892124358887472),
            Block.makeCuboidShape(6.3700534695549145, 10, 2.678244275861454, 11.370053469554914, 11, 7.678244275861449),
            Block.makeCuboidShape(10.744071908352375, 10, 10.892124358887472, 14.744071908352375, 11, 14.892124358887472),
            Block.makeCuboidShape(13.76707974751492, 10, 7.9959721219959725, 16.76707974751492, 11, 11.995972121995973),
            Block.makeCuboidShape(5.744071908352375, 10, 8.892124358887472, 6.744071908352375, 16, 13.892124358887472),
            Block.makeCuboidShape(6.744071908352375, 15, 8.892124358887472, 8.744071908352375, 16, 13.892124358887472),
            Block.makeCuboidShape(4.7440719083523755, 10, 8.892124358887472, 5.744071908352375, 12, 13.892124358887472),
            Block.makeCuboidShape(3.7440719083523755, 10, 8.892124358887472, 4.7440719083523755, 11, 13.892124358887472),
            Block.makeCuboidShape(-0.2559280916476281, 5, -0.10787564111252657, 15.744071908352375, 6, 15.892124358887472),
            Block.makeCuboidShape(-0.2559280916476281, 2, -0.10787564111252657, 15.744071908352375, 3, 15.892124358887472),
            Block.makeCuboidShape(7.2335060906062445, 6, 9.446732782973914, 11.233506090606244, 7, 13.446732782973914),
            Block.makeCuboidShape(10.07080278494298, 3, 7.2100185527825715, 14.07080278494298, 4, 11.210018552782572)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    private static final VoxelShape SHAPE_S = Stream.of(
            Block.makeCuboidShape(-0.4468231013566806, 0, -0.3759830075583519, 0.5531768986433194, 9, 0.6240169924416517),
            Block.makeCuboidShape(-0.4468231013566806, 0, 14.62401699244165, 0.5531768986433194, 9, 15.62401699244165),
            Block.makeCuboidShape(14.553176898643319, 0, -0.3759830075583519, 15.553176898643319, 9, 0.6240169924416517),
            Block.makeCuboidShape(14.553176898643319, 0, 14.62401699244165, 15.553176898643319, 9, 15.62401699244165),
            Block.makeCuboidShape(-0.4468231013566806, 9, -0.3759830075583519, 15.553176898643319, 10, 15.62401699244165),
            Block.makeCuboidShape(1.5531768986433194, 10, 6.62401699244165, 3.5531768986433194, 11, 8.62401699244165),
            Block.makeCuboidShape(4.5531768986433185, 10, 6.62401699244165, 6.5531768986433185, 11, 8.62401699244165),
            Block.makeCuboidShape(2.5531768986433194, 11, 6.62401699244165, 5.5531768986433185, 13, 8.62401699244165),
            Block.makeCuboidShape(-0.4468231013566806, 0, 6.62401699244165, 0.5531768986433194, 16, 7.62401699244165),
            Block.makeCuboidShape(1.5531768986433194, 13, 6.62401699244165, 6.5531768986433185, 15, 8.62401699244165),
            Block.makeCuboidShape(5.5531768986433185, 12, 7.62401699244165, 8.553176898643319, 13, 8.62401699244165),
            Block.makeCuboidShape(-0.4468231013566806, 12, 7.62401699244165, 2.5531768986433194, 13, 8.62401699244165),
            Block.makeCuboidShape(-0.4468231013566806, 11, 7.62401699244165, 0.5531768986433194, 12, 8.62401699244165),
            Block.makeCuboidShape(7.5531768986433185, 11, 7.62401699244165, 8.553176898643319, 12, 8.62401699244165),
            Block.makeCuboidShape(7.7670569816693416, 10, 6.24999855364419, 12.767056981669338, 11, 11.24999855364419),
            Block.makeCuboidShape(0.5531768986433194, 10, 10.62401699244165, 4.5531768986433185, 11, 14.62401699244165),
            Block.makeCuboidShape(3.4493291355348186, 10, 13.647024831604195, 7.449329135534818, 11, 16.647024831604195),
            Block.makeCuboidShape(1.5531768986433194, 10, 5.624016992441651, 6.5531768986433185, 16, 6.62401699244165),
            Block.makeCuboidShape(1.5531768986433194, 15, 6.62401699244165, 6.5531768986433185, 16, 8.62401699244165),
            Block.makeCuboidShape(1.5531768986433194, 10, 4.624016992441651, 6.5531768986433185, 12, 5.624016992441651),
            Block.makeCuboidShape(1.5531768986433194, 10, 3.6240169924416508, 6.5531768986433185, 11, 4.624016992441651),
            Block.makeCuboidShape(-0.4468231013566806, 5, -0.3759830075583519, 15.553176898643319, 6, 15.62401699244165),
            Block.makeCuboidShape(-0.4468231013566806, 2, -0.3759830075583519, 15.553176898643319, 3, 15.62401699244165),
            Block.makeCuboidShape(1.998568474556877, 6, 7.11345117469552, 5.998568474556876, 7, 11.11345117469552),
            Block.makeCuboidShape(4.235282704748219, 3, 9.950747869032256, 8.235282704748219, 4, 13.950747869032256)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    private static final VoxelShape SHAPE_E = Stream.of(
            Block.makeCuboidShape(14.82128426508914, 0, 0.4331219827325956, 15.821284265089144, 9, 1.4331219827325956),
            Block.makeCuboidShape(-0.1787157349108588, 0, 0.4331219827325956, 0.8212842650891412, 9, 1.4331219827325956),
            Block.makeCuboidShape(14.82128426508914, 0, 15.433121982732594, 15.821284265089144, 9, 16.433121982732594),
            Block.makeCuboidShape(-0.1787157349108588, 0, 15.433121982732594, 0.8212842650891412, 9, 16.433121982732594),
            Block.makeCuboidShape(-0.1787157349108588, 9, 0.4331219827325956, 15.821284265089144, 10, 16.433121982732594),
            Block.makeCuboidShape(6.82128426508914, 10, 2.4331219827325956, 8.82128426508914, 11, 4.433121982732595),
            Block.makeCuboidShape(6.82128426508914, 10, 5.433121982732595, 8.82128426508914, 11, 7.433121982732594),
            Block.makeCuboidShape(6.82128426508914, 11, 3.4331219827325956, 8.82128426508914, 13, 6.433121982732595),
            Block.makeCuboidShape(7.82128426508914, 0, 0.4331219827325956, 8.82128426508914, 16, 1.4331219827325956),
            Block.makeCuboidShape(6.82128426508914, 13, 2.4331219827325956, 8.82128426508914, 15, 7.433121982732594),
            Block.makeCuboidShape(6.82128426508914, 12, 6.433121982732595, 7.82128426508914, 13, 9.433121982732594),
            Block.makeCuboidShape(6.82128426508914, 12, 0.4331219827325956, 7.82128426508914, 13, 3.4331219827325956),
            Block.makeCuboidShape(6.82128426508914, 11, 0.4331219827325956, 7.82128426508914, 12, 1.4331219827325956),
            Block.makeCuboidShape(6.82128426508914, 11, 8.433121982732594, 7.82128426508914, 12, 9.433121982732594),
            Block.makeCuboidShape(4.195302703886601, 10, 8.647002065758617, 9.1953027038866, 11, 13.647002065758613),
            Block.makeCuboidShape(0.8212842650891412, 10, 1.4331219827325956, 4.821284265089141, 11, 5.433121982732595),
            Block.makeCuboidShape(-1.2017235740734051, 10, 4.329274219624094, 1.7982764259265958, 11, 8.329274219624093),
            Block.makeCuboidShape(8.82128426508914, 10, 2.4331219827325956, 9.82128426508914, 16, 7.433121982732594),
            Block.makeCuboidShape(6.82128426508914, 15, 2.4331219827325956, 8.82128426508914, 16, 7.433121982732594),
            Block.makeCuboidShape(9.82128426508914, 10, 2.4331219827325956, 10.82128426508914, 12, 7.433121982732594),
            Block.makeCuboidShape(10.82128426508914, 10, 2.4331219827325956, 11.82128426508914, 11, 7.433121982732594),
            Block.makeCuboidShape(-0.1787157349108588, 5, 0.4331219827325956, 15.821284265089144, 6, 16.433121982732594),
            Block.makeCuboidShape(-0.1787157349108588, 2, 0.4331219827325956, 15.821284265089144, 3, 16.433121982732594),
            Block.makeCuboidShape(4.331850082835271, 6, 2.878513558646153, 8.33185008283527, 7, 6.878513558646152),
            Block.makeCuboidShape(1.4945533884985354, 3, 5.115227788837495, 5.4945533884985345, 4, 9.115227788837494)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    private static final VoxelShape SHAPE_N = Stream.of(
            Block.makeCuboidShape(15.012179274798196, 0, 14.701229349178416, 16.012179274798196, 9, 15.70122934917842),
            Block.makeCuboidShape(15.012179274798196, 0, -0.2987706508215844, 16.012179274798196, 9, 0.7012293491784156),
            Block.makeCuboidShape(0.012179274798195472, 0, 14.701229349178416, 1.0121792747981955, 9, 15.70122934917842),
            Block.makeCuboidShape(0.012179274798195472, 0, -0.2987706508215844, 1.0121792747981955, 9, 0.7012293491784156),
            Block.makeCuboidShape(0.01217927479819636, 9, -0.2987706508215844, 16.012179274798196, 10, 15.70122934917842),
            Block.makeCuboidShape(12.012179274798196, 10, 6.701229349178416, 14.012179274798196, 11, 8.701229349178416),
            Block.makeCuboidShape(9.012179274798196, 10, 6.701229349178416, 11.012179274798196, 11, 8.701229349178416),
            Block.makeCuboidShape(10.012179274798196, 11, 6.701229349178416, 13.012179274798196, 13, 8.701229349178416),
            Block.makeCuboidShape(15.012179274798196, 0, 7.701229349178416, 16.012179274798196, 16, 8.701229349178416),
            Block.makeCuboidShape(9.012179274798196, 13, 6.701229349178416, 14.012179274798196, 15, 8.701229349178416),
            Block.makeCuboidShape(7.0121792747981955, 12, 6.701229349178416, 10.012179274798196, 13, 7.701229349178416),
            Block.makeCuboidShape(13.012179274798196, 12, 6.701229349178416, 16.012179274798196, 13, 7.701229349178416),
            Block.makeCuboidShape(15.012179274798196, 11, 6.701229349178416, 16.012179274798196, 12, 7.701229349178416),
            Block.makeCuboidShape(7.0121792747981955, 11, 6.701229349178416, 8.012179274798196, 12, 7.701229349178416),
            Block.makeCuboidShape(2.798299191772176, 10, 4.075247787975876, 7.7982991917721725, 11, 9.075247787975876),
            Block.makeCuboidShape(11.012179274798196, 10, 0.7012293491784156, 15.012179274798196, 11, 4.701229349178416),
            Block.makeCuboidShape(8.116027037906697, 10, -1.3217784899841298, 12.116027037906697, 11, 1.6782215100158702),
            Block.makeCuboidShape(9.012179274798196, 10, 8.701229349178416, 14.012179274798196, 16, 9.701229349178416),
            Block.makeCuboidShape(9.012179274798196, 15, 6.701229349178416, 14.012179274798196, 16, 8.701229349178416),
            Block.makeCuboidShape(9.012179274798196, 10, 9.701229349178416, 14.012179274798196, 12, 10.701229349178416),
            Block.makeCuboidShape(9.012179274798196, 10, 10.701229349178416, 14.012179274798196, 11, 11.701229349178416),
            Block.makeCuboidShape(0.01217927479819636, 5, -0.2987706508215844, 16.012179274798196, 6, 15.70122934917842),
            Block.makeCuboidShape(0.01217927479819636, 2, -0.2987706508215844, 16.012179274798196, 3, 15.70122934917842),
            Block.makeCuboidShape(9.566787698884639, 6, 4.211795166924546, 13.566787698884639, 7, 8.211795166924546),
            Block.makeCuboidShape(7.330073468693295, 3, 1.3744984725878098, 11.330073468693296, 4, 5.37449847258781)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public Table(Properties properties) {
        super(properties);
    }
    @SuppressWarnings("deprecation")
    @Override
    public VoxelShape getShape(BlockState state, IBlockReader worldIn, BlockPos pos, ISelectionContext context)
    {
        switch (state.get(FACING))
        {
            case NORTH:
                return SHAPE_N;
            case EAST:
                return SHAPE_E;
            case SOUTH:
                return SHAPE_S;
            case WEST:
                return SHAPE_W;
            default:
                return SHAPE_N;
        }
    }

    @Nullable
    @Override
    public BlockState getStateForPlacement(BlockItemUseContext context)
    {
        return this.getDefaultState().with(FACING, context.getPlacementHorizontalFacing().getOpposite());
    }

    @SuppressWarnings("deprecation")
    @Override
    public BlockState rotate(BlockState state, Rotation rot)
    {
        return state.with(FACING, rot.rotate(state.get(FACING)));
    }

    @SuppressWarnings("deprecation")
    @Override
    public BlockState mirror(BlockState state, Mirror mirrorIn)
    {
        return state.rotate(mirrorIn.toRotation((state.get(FACING))));
    }

    @Override
    protected void fillStateContainer(StateContainer.Builder<Block, BlockState> builder)
    {
        builder.add(FACING);
    }
}
